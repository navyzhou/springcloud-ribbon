服务注册
	在服务治理框架中，通常都会构建一个注册中心，每个服务单元向注册中心登记自己提供的服务，包括服务的主机与端口号、服务版本号、通讯协议等一些附加信息。
	注册中心按照服务名分类组织服务清单，同时还需要以心跳检测的方式去监测清单中的服务是否可用，若不可用需要从服务清单中剔除，以达到排除故障服务的效果。

服务发现
	在服务治理框架下，服务间的调用不再通过指定具体的实例地址来实现，而是通过服务名发起请求调用实现。
	服务调用方通过服务名从服务注册中心的服务清单中获取服务实例的列表清单，通过指定的负载均衡策略取出一个服务实例位置来进行服务调用。

Eureka服务端
	Eureka服务端，即服务注册中心。它同其他服务注册中心一样，支持高可用配置。依托于强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。
	Eureka服务端支持集群模式部署，当集群中有分片发生故障的时候，Eureka会自动转入自我保护模式。它允许在分片发生故障的时候继续提供服务的发现和注册，
	当故障分配恢复时，集群中的其他分片会把他们的状态再次同步回来。集群中的的不同服务注册中心通过异步模式互相复制各自的状态，这也意味着在给定的时间点每个实例关于所有服务的状态可能存在不一致的现象。

Eureka客户端
	Eureka客户端，途中的即服务提供者，主要处理服务的注册和发现。客户端服务通过注册和参数配置的方式，嵌入在客户端应用程序的代码中。
	在应用程序启动时，Eureka客户端向服务注册中心注册自身提供的服务，并周期性的发送心跳来更新它的服务租约。
	同时，他也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期行的刷新服务状态。
	
这里解释一下什么是注册，什么是续约，什么是下线，什么是Relicate	
	1.注册，表示服务提供者需要向注册中心注册服务，在服务治理框架中，通常都会构建一个注册中心，每个服务单元向注册中心登记自己提供的服务，
		包括服务的主机与端口号、服务版本号、通讯协议等一些附加信息。
　　　　　　注册中心按照服务名分类组织服务清单，同时还需要以心跳检测的方式去监测清单中的服务是否可用，若不可用需要从服务清单中剔除，以达到排除故障服务的效果。

	2.续约，这里类似于心跳检测机制，默认是每隔90秒，服务提供者需要向注册中心进行续约，目的是隔一段时间Service Provider调用接口，
		告诉Eureka Server它还活着没挂，不要把它T了。通俗的说就是它们两之间的心跳检测，避免服务提供者被剔除掉

　　	3.下线，表示服务提供者断开

Eureka 的主要作用实际上跟Zookeeper是非常类似的，但是在spring cloud中虽然支持有ZooKeeper，但是
从官方的宣传角度来说，并不支持这样的处理，推荐使用的是Eureka，以为速度更快。同时，该服务组件是
以程序的形式出现的。也就是说你只需要编写一个项目，而后就可以启动Eureka的注册服务了。

Eureka服务端的安全认证配置
	在pom.xml文件中引入SpringSecurity的依赖包。一旦导入了这个包，则我们每次启动微服务的时候，都会自动生成一个密码（用户名默认为user），
	而这个密码因为会改变，所以一般都不使用。所以要修改application.yml的配置文件，追加密码的配置项。
	此时用户注册的时候也需要在前面加上账号和密码:http://navy:123456@127.0.0.1:6868/eureka/

发现管理：
	在实际项目运行过程中，需要通过Eureka作为微服务的监控处理程序
		1. 新服务追加的时候应该立即进行注册
		2. 当某一个服务下线或掉线后应该进行清理
	
打包发布：这个时候我们必须考虑项目的各种环境，如果是开发（dev）、测试（beta）、生成（product），那么下面我们也将基于
	这样的方式进行eureka项目的打包。本次的打包处理将直接基于yml的配置文件完成
	
打包：
	项目上右击Run as -> maven build    在弹出框的Goals中输入： clean install package
	打开cmd，输入java -jar springcloud-ribbon-eureka-server.jar回车
	再打开一个cmd，输入 java -jar springcloud-ribbon-eureka-server.jar --spring.profiles.active=dev-6869 